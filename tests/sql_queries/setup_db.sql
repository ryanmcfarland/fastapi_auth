DROP TRIGGER IF EXISTS trigger_create_default_user_role ON users;
DROP TABLE IF EXISTS user_refresh_tokens;
DROP TABLE IF EXISTS user_roles;
DROP TABLE IF EXISTS users;

CREATE TABLE users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username TEXT NOT NULL UNIQUE,
    email TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    password_hash TEXT NOT NULL,
    verified BOOLEAN NOT NULL DEFAULT FALSE
);


CREATE TABLE user_roles (
    user_id INTEGER NOT NULL,
    user_role TEXT NOT NULL,
    CONSTRAINT fk_user_roles_user_id FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


CREATE TABLE user_refresh_tokens (
    user_id INTEGER NOT NULL,
    refresh_token TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT fk_refresh_tokens_user_id FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


-- Function to automatically create a default 'user' role when a new user is inserted
CREATE OR REPLACE FUNCTION create_default_user_role()
RETURNS TRIGGER AS $$
BEGIN
    -- Insert a default 'user' role for the newly created user
    INSERT INTO user_roles (user_id, user_role)
    VALUES (NEW.id, 'user');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- Trigger that fires after each user insertion to create the default role
CREATE TRIGGER trigger_create_default_user_role
    AFTER INSERT ON users
    FOR EACH ROW
    EXECUTE FUNCTION create_default_user_role();