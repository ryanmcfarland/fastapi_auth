/*
Combination of all schema migrations, maybe this should be combined into one file?
*/

DROP TRIGGER IF EXISTS trigger_create_default_user_role ON users CASCADE;
DROP TRIGGER IF EXISTS trigger_limit_user_refresh_tokens ON user_refresh_tokens CASCADE;
DROP TABLE IF EXISTS user_refresh_tokens;
DROP TABLE IF EXISTS user_roles;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS roles;

CREATE TABLE users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username TEXT NOT NULL UNIQUE,
    email TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT (NOW() AT TIME ZONE 'UTC'),
    last_login_at TIMESTAMPTZ DEFAULT (NOW() AT TIME ZONE 'UTC'),
    deleted_at TIMESTAMPTZ,
    deleted_by INTEGER,
    password_hash TEXT NOT NULL,
    verified BOOLEAN NOT NULL DEFAULT FALSE,
    -- Constraints
    CONSTRAINT fk_users_deleted_by FOREIGN KEY (deleted_by) REFERENCES users(id)
);


CREATE TABLE roles (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT (NOW() AT TIME ZONE 'UTC'),
    role_name TEXT NOT NULL UNIQUE
);


-- Junction table for many-to-many relationship (users <-> roles)
CREATE TABLE user_roles (
    user_id INTEGER NOT NULL,
    role_id INTEGER NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT (NOW() AT TIME ZONE 'UTC'),
    PRIMARY KEY (user_id, role_id), -- primary key prevents duplicates
    -- Constraints
    CONSTRAINT fk_user_roles_user_id FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_user_roles_role_id FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE
);


CREATE TABLE user_refresh_tokens (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER NOT NULL,
    refresh_token TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT (NOW() AT TIME ZONE 'UTC'),
    last_refresh_at TIMESTAMPTZ NOT NULL DEFAULT (NOW() AT TIME ZONE 'UTC'),
    -- Constraints
    CONSTRAINT fk_refresh_tokens_user_id FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


-- Function to automatically create a default 'user' role when a new user is inserted
-- Will be used in the trigger: trigger_create_default_user_role
CREATE OR REPLACE FUNCTION create_default_user_role()
RETURNS TRIGGER AS $$
DECLARE
    default_role_id INTEGER;
BEGIN
    -- Get the ID of the 'user' role
    SELECT id INTO default_role_id 
    FROM roles 
    WHERE role_name = 'user';
    
    -- Insert the default role assignment
    IF default_role_id IS NOT NULL THEN
        INSERT INTO user_roles (user_id, role_id)
        VALUES (NEW.id, default_role_id);
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- Function to limit the amount of refresh_tokens per user (set to 2 but can be configured at a later stage)
-- Trigger: trigger_limit_user_refresh_tokens
CREATE OR REPLACE FUNCTION limit_user_refresh_tokens()
RETURNS TRIGGER AS $$
DECLARE
    row_count INTEGER;
    oldest_id INTEGER;
BEGIN
    -- Count existing rows for this user
    SELECT COUNT(*) INTO row_count
    FROM user_refresh_tokens 
    WHERE user_id = NEW.user_id;
    
    -- If user now has more than 2 rows, delete the oldest one
    IF row_count > 2 THEN
        -- Find the oldest row for this user (assuming you have a timestamp or auto-increment id)
        SELECT id INTO oldest_id
        FROM user_refresh_tokens 
        WHERE user_id = NEW.user_id
        ORDER BY created_at ASC -- or ORDER BY id ASC if using auto-increment
        LIMIT 1;
        -- Delete the oldest row
        DELETE FROM user_refresh_tokens 
        WHERE id = oldest_id;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- INSERT Basic Roles before any Triggers have been Applied


-- Insert default roles
INSERT INTO roles (role_name) VALUES 
    ('user'),
    ('system'),
    ('admin')
ON CONFLICT (role_name) DO NOTHING;


-- Insert unknown user to handle future defaults
INSERT INTO users (id, username, email, password_hash) VALUES 
    (1, 'Unknown User', 'unknown@system.local', 'dummy_password')
ON CONFLICT DO NOTHING;


-- Insert 'Unknown User' to 'system' role
INSERT INTO user_roles (user_id, role_id) VALUES
    (1, 2)
ON CONFLICT DO NOTHING;

-- Set sequence to continue from ID 2
ALTER SEQUENCE users_id_seq RESTART WITH 2;


-- SET Triggers


-- Trigger that fires after each user insertion to create the default role
CREATE TRIGGER trigger_create_default_user_role
    AFTER INSERT ON users
    FOR EACH ROW
    EXECUTE FUNCTION create_default_user_role();


CREATE TRIGGER trigger_limit_user_refresh_tokens
    AFTER INSERT ON user_refresh_tokens
    FOR EACH ROW
    EXECUTE FUNCTION limit_user_refresh_tokens();
